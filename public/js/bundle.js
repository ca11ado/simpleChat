(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants');

module.exports = {
    updateListOfUsers: function updateListOfUsers(newList) {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.UPDATE_USERS_LIST,
            list: newList
        });
    }
};

},{"../constants/SChatConstants":6,"../dispatcher/SChatDispatcher":7}],2:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var chat = require('./chat/chat');
var ws = require('./chat/websocket');
var dispatcher = require('./dispatcher/SChatDispatcher');
var component = require('./components/SChatComponent'),
    SChatUsersStore = require('./stores/SChatUsersStore');

console.log('start app');

ws.connect('ws://localhost:8080');

ws.onMsg('myMsg', function (data) {
  console.log('New myMsg message', data);
});

setTimeout(function () {
  ws.sendTestMsg('test message from app');
}, 2000);

},{"./chat/chat":3,"./chat/websocket":4,"./components/SChatComponent":5,"./dispatcher/SChatDispatcher":7,"./stores/SChatUsersStore":8}],3:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var ws = require('./websocket.js');
var dispatcher = require('../dispatcher/SChatDispatcher');

setTimeout(function () {
  ws.sendTestMsg('test message from chat');
}, 2000);

module.exports = [{
  name: 't0s',
  messages: 10
}, {
  name: 'test',
  messages: 5
}];

},{"../dispatcher/SChatDispatcher":7,"./websocket.js":4}],4:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */

var _socket = undefined,
    _events = {};
var WS_TYPE_NEW = 'new',
    WS_TYPE_MSG = "message";

function message(type, data) {
  switch (type) {
    case types.NEW:
      return { type: types.NEW, login: data.login };
      break;
    case types.MESSAGE:
      return { type: types.MESSAGE, login: data.login, msg: data.msg, time: data.time };
      break;
    default:
    //nothing
  }
}

var WS = {

  connect: function connect(url) {
    console.log('starting ws');
    if (_socket) return Error('Уже есть соединение');

    _socket = new WebSocket(url);

    _socket.onopen = function () {
      _socket.send('Hello world2');
    };
    _socket.onclose = function (event) {
      console.log('Код: ' + event.code + ' причина: ' + event.reason);
    };
    _socket.onmessage = function (event) {
      //WS.emitMsg('myMsg', event.data);
      console.log("Получены данные " + event.data);
    };
    _socket.onerror = function (error) {
      console.log("Ошибка " + error.message);
    };

    return _socket;
  },

  getSocket: function getSocket() {
    return _socket;
  },

  onMsg: function onMsg(event, callback) {
    _events[event] = _events[event] ? _events[event].push(callback) : [];
  },

  emitMsg: function emitMsg(event, arg) {
    if (_events.hasOwnProperty(event)) {
      _events[event].map(function (v) {
        v(arg);
      });
    }
  },

  sendTestMsg: function sendTestMsg(txt) {
    _socket.send(txt);
  }

};

module.exports = WS;

},{}],5:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatActions = require('../actions/SChatActions'),
    SChatUsersStore = require('../stores/SChatUsersStore');

SChatUsersStore.addChangeListener(function () {
    console.log('Component retrieve data from store');
});

module.exports = setTimeout(function () {
    SChatActions.updateListOfUsers(['user1', 'user2']);
}, 2000);

},{"../actions/SChatActions":1,"../stores/SChatUsersStore":8}],6:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

function keyMirror(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) obj[key] = key;
    }
    return obj;
}

var SChatConstants = keyMirror({
    UPDATE_USERS_LIST: null
});

module.exports = SChatConstants;

},{}],7:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var _callbacks = [];

module.exports = {
    register: function register(callback) {
        _callbacks.push(callback);
    },
    dispatch: function dispatch(action) {
        _callbacks.map(function (v) {
            v(action);
        });
    }
};

},{}],8:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change';
var _users = [];

function updateUsers(newUsers) {
    _users = newUsers;
}

var SChatUsersStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    }
});

SChatDispatcher.register(function (action) {
    console.log('DISPATCHER registered in SChatUsersStore');
    switch (action.actionType) {
        case SChatConstants.UPDATE_USERS_LIST:
            updateUsers(action.list);
            SChatUsersStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatUsersStore;

},{"../constants/SChatConstants":6,"../dispatcher/SChatDispatcher":7,"./emiter":9}],9:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var Emitter = function Emitter() {};

Emitter.prototype.addMyListener = function (event, listener) {
    if (!this._events) this._events = {};
    if (!this._events.hasOwnProperty(event)) this._events[event] = [];
    this._events[event].push(listener);
};

Emitter.prototype.emit = function (event, arg) {
    if (this._events && this._events.hasOwnProperty(event)) {
        this._events[event].map(function (v) {
            v(arg);
        });
    }
};

module.exports = Emitter;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiU0NoYXRBY3Rpb25zLmpzIiwiYXBwLmpzIiwiY2hhdC5qcyIsIndlYnNvY2tldC5qcyIsIlNDaGF0Q29tcG9uZW50LmpzIiwiU0NoYXRDb25zdGFudHMuanMiLCJTQ2hhdERpc3BhdGNoZXIuanMiLCJTQ2hhdFVzZXJzU3RvcmUuanMiLCJlbWl0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNJQSxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsK0JBQStCLENBQUM7SUFDMUQsY0FBYyxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDOztBQUU1RCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YscUJBQWlCLEVBQUUsMkJBQVMsT0FBTyxFQUFDO0FBQ2hDLHVCQUFlLENBQUMsUUFBUSxDQUFDO0FBQ3JCLHNCQUFVLEVBQUUsY0FBYyxDQUFDLGlCQUFpQjtBQUM1QyxnQkFBSSxFQUFFLE9BQU87U0FDaEIsQ0FBQyxDQUFDO0tBQ047Q0FDRixDQUFDOzs7Ozs7Ozs7QUNWRixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbEMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDckMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDekQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0lBQ2xELGVBQWUsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQzs7QUFFMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFekIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztBQUVsQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9B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LENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IFNDaGF0RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyksXHJcbiAgICBTQ2hhdENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9TQ2hhdENvbnN0YW50cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgdXBkYXRlTGlzdE9mVXNlcnM6IGZ1bmN0aW9uKG5ld0xpc3Qpe1xyXG4gICAgICBTQ2hhdERpc3BhdGNoZXIuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgYWN0aW9uVHlwZTogU0NoYXRDb25zdGFudHMuVVBEQVRFX1VTRVJTX0xJU1QsXHJcbiAgICAgICAgICBsaXN0OiBuZXdMaXN0XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDYuMTEuMjAxNS5cclxuICovXHJcblxyXG5sZXQgY2hhdCA9IHJlcXVpcmUoJy4vY2hhdC9jaGF0Jyk7XHJcbmxldCB3cyA9IHJlcXVpcmUoJy4vY2hhdC93ZWJzb2NrZXQnKTtcclxubGV0IGRpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyk7XHJcbmxldCBjb21wb25lbnQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvU0NoYXRDb21wb25lbnQnKSxcclxuICAgIFNDaGF0VXNlcnNTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmVzL1NDaGF0VXNlcnNTdG9yZScpO1xyXG5cclxuY29uc29sZS5sb2coJ3N0YXJ0IGFwcCcpO1xyXG5cclxud3MuY29ubmVjdCgnd3M6Ly9sb2NhbGhvc3Q6ODA4MCcpO1xyXG5cclxud3Mub25Nc2coJ215TXNnJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICBjb25zb2xlLmxvZygnTmV3IG15TXNnIG1lc3NhZ2UnLCBkYXRhKTtcclxufSk7XHJcblxyXG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgd3Muc2VuZFRlc3RNc2coJ3Rlc3QgbWVzc2FnZSBmcm9tIGFwcCcpO1xyXG59LDIwMDApOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHRvcyBvbiAwNi4xMS4yMDE1LlxyXG4gKi9cclxuXHJcbmxldCB3cyA9IHJlcXVpcmUoJy4vd2Vic29ja2V0LmpzJyk7XHJcbmxldCBkaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vZGlzcGF0Y2hlci9TQ2hhdERpc3BhdGNoZXInKTtcclxuXHJcbnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICB3cy5zZW5kVGVzdE1zZygndGVzdCBtZXNzYWdlIGZyb20gY2hhdCcpO1xyXG59LDIwMDApO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogJ3QwcycsXHJcbiAgICBtZXNzYWdlczogMTBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICd0ZXN0JyxcclxuICAgIG1lc3NhZ2VzOiA1XHJcbiAgfVxyXG5dOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHRvcyBvbiAwNy4xMS4yMDE1LlxyXG4gKi9cclxuXHJcbmxldCBfc29ja2V0LFxyXG4gICAgX2V2ZW50cyA9IHt9O1xyXG5jb25zdCBXU19UWVBFX05FVyA9ICduZXcnLFxyXG4gICAgICBXU19UWVBFX01TRyA9IFwibWVzc2FnZVwiO1xyXG5cclxuZnVuY3Rpb24gbWVzc2FnZSh0eXBlLGRhdGEpIHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgdHlwZXMuTkVXOlxyXG4gICAgICByZXR1cm4ge3R5cGU6IHR5cGVzLk5FVywgbG9naW46IGRhdGEubG9naW59O1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgdHlwZXMuTUVTU0FHRTpcclxuICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlcy5NRVNTQUdFLCBsb2dpbjpkYXRhLmxvZ2luLCBtc2c6IGRhdGEubXNnLCB0aW1lOiBkYXRhLnRpbWV9O1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQgOlxyXG4gICAgICAvL25vdGhpbmdcclxuICB9XHJcbn1cclxuXHJcbmxldCBXUyA9IHtcclxuXHJcbiAgY29ubmVjdDogZnVuY3Rpb24odXJsKSB7XHJcbiAgICBjb25zb2xlLmxvZygnc3RhcnRpbmcgd3MnKTtcclxuICAgIGlmIChfc29ja2V0KSByZXR1cm4gRXJyb3IoJ9Cj0LbQtSDQtdGB0YLRjCDRgdC+0LXQtNC40L3QtdC90LjQtScpO1xyXG5cclxuICAgIF9zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHVybCk7XHJcblxyXG4gICAgX3NvY2tldC5vbm9wZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgX3NvY2tldC5zZW5kKCdIZWxsbyB3b3JsZDInKTtcclxuICAgIH07XHJcbiAgICBfc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkgeyBjb25zb2xlLmxvZygn0JrQvtC0OiAnICsgZXZlbnQuY29kZSArICcg0L/RgNC40YfQuNC90LA6ICcgKyBldmVudC5yZWFzb24pOyB9O1xyXG4gICAgX3NvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAvL1dTLmVtaXRNc2coJ215TXNnJywgZXZlbnQuZGF0YSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi0J/QvtC70YPRh9C10L3RiyDQtNCw0L3QvdGL0LUgXCIgKyBldmVudC5kYXRhKTtcclxuICAgIH07XHJcbiAgICBfc29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbihlcnJvcikgeyBjb25zb2xlLmxvZyhcItCe0YjQuNCx0LrQsCBcIiArIGVycm9yLm1lc3NhZ2UpOyB9O1xyXG5cclxuICAgIHJldHVybiBfc29ja2V0O1xyXG4gIH0sXHJcblxyXG4gIGdldFNvY2tldDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gX3NvY2tldDtcclxuICB9LFxyXG5cclxuICBvbk1zZzogZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICBfZXZlbnRzW2V2ZW50XSA9IF9ldmVudHNbZXZlbnRdID8gX2V2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjaykgOiBbXTtcclxuICB9LFxyXG5cclxuICBlbWl0TXNnOiBmdW5jdGlvbihldmVudCwgYXJnKSB7XHJcbiAgICBpZiAoX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcclxuICAgICAgX2V2ZW50c1tldmVudF0ubWFwKGZ1bmN0aW9uKHYpe1xyXG4gICAgICAgIHYoYXJnKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgc2VuZFRlc3RNc2c6IGZ1bmN0aW9uKHR4dCkge1xyXG4gICAgX3NvY2tldC5zZW5kKHR4dCk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV1M7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IFNDaGF0QWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvU0NoYXRBY3Rpb25zJyksXHJcbiAgICBTQ2hhdFVzZXJzU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvU0NoYXRVc2Vyc1N0b3JlJyk7XHJcblxyXG5TQ2hhdFVzZXJzU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0NvbXBvbmVudCByZXRyaWV2ZSBkYXRhIGZyb20gc3RvcmUnKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgIFNDaGF0QWN0aW9ucy51cGRhdGVMaXN0T2ZVc2VycyhbJ3VzZXIxJywndXNlcjInXSk7XHJcbn0sMjAwMCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24ga2V5TWlycm9yKG9iaikge1xyXG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgb2JqW2tleV0gPSBrZXk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5sZXQgU0NoYXRDb25zdGFudHMgPSBrZXlNaXJyb3Ioe1xyXG4gICAgVVBEQVRFX1VTRVJTX0xJU1Q6IG51bGxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNDaGF0Q29uc3RhbnRzOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHRvcyBvbiAwOC4xMS4yMDE1LlxyXG4gKi9cclxuXHJcbmxldCBfY2FsbGJhY2tzID0gW107XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihjYWxsYmFjayl7XHJcbiAgICAgICAgX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH0sXHJcbiAgICBkaXNwYXRjaDogZnVuY3Rpb24oYWN0aW9uKXtcclxuICAgICAgICBfY2FsbGJhY2tzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICB2KGFjdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IFNDaGF0RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyksXHJcbiAgICBTQ2hhdENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9TQ2hhdENvbnN0YW50cycpLFxyXG4gICAgRW1pdHRlciA9IHJlcXVpcmUoJy4vZW1pdGVyJyk7XHJcblxyXG5jb25zdCBDSEFOR0VfRVZFTlQgPSAnY2hhbmdlJztcclxubGV0IF91c2VycyA9IFtdO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlVXNlcnMobmV3VXNlcnMpIHtcclxuICAgIF91c2VycyA9IG5ld1VzZXJzO1xyXG59XHJcblxyXG5sZXQgU0NoYXRVc2Vyc1N0b3JlID0gT2JqZWN0LmFzc2lnbih7fSwgRW1pdHRlci5wcm90b3R5cGUsIHtcclxuICAgIGFkZENoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuYWRkTXlMaXN0ZW5lcihDSEFOR0VfRVZFTlQsIGNhbGxiYWNrKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5TQ2hhdERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24oYWN0aW9uKXtcclxuICAgIGNvbnNvbGUubG9nKCdESVNQQVRDSEVSIHJlZ2lzdGVyZWQgaW4gU0NoYXRVc2Vyc1N0b3JlJyk7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgY2FzZSBTQ2hhdENvbnN0YW50cy5VUERBVEVfVVNFUlNfTElTVDpcclxuICAgICAgICAgICAgdXBkYXRlVXNlcnMoYWN0aW9uLmxpc3QpO1xyXG4gICAgICAgICAgICBTQ2hhdFVzZXJzU3RvcmUuZW1pdChDSEFOR0VfRVZFTlQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvL25vdGhpbmdcclxuICAgIH1cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNDaGF0VXNlcnNTdG9yZTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDguMTEuMjAxNS5cclxuICovXHJcblxyXG5sZXQgRW1pdHRlciA9IGZ1bmN0aW9uKCkge1xyXG59O1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkTXlMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LGxpc3RlbmVyKSB7XHJcbiAgICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0ge307XHJcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHRoaXMuX2V2ZW50c1tldmVudF0gPSBbXTtcclxuICAgIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChsaXN0ZW5lcik7XHJcbn07XHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQsIGFyZykge1xyXG4gICAgaWYgKHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XS5tYXAoZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICB2KGFyZyk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjsiXX0=
