(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants');

module.exports = {
    updateListOfUsers: function updateListOfUsers(newList) {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.ACTIVATE_LOGIN_FORM,
            list: newList
        });
    },
    connectedToWebSocket: function connectedToWebSocket() {
        console.log('f:SChatActions > WebSocket connected');
        SChatDispatcher.dispatch({
            actionType: SChatConstants.CONN_OPEN
        });
    },
    authorized: function authorized(userName) {
        console.log('f:SChatActions > user %o authorized', userName);
        SChatDispatcher.dispatch({
            actionType: SChatConstants.AUTHORIZED,
            userName: userName
        });
    }
};

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9}],2:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var chat = require('./chat/chat');
var ws = require('./chat/websocket');
var dispatcher = require('./dispatcher/SChatDispatcher');
var component = require('./components/SChatComponent'),
    SChatUsersStore = require('./stores/SChatUsersStore');

console.log('start app');

ws.connect('ws://localhost:8080');

/*
function testFn(...rest) {
    console.log(rest);
}
testFn('dd', 'tt', 'pp');*/

},{"./chat/chat":4,"./chat/websocket":6,"./components/SChatComponent":7,"./dispatcher/SChatDispatcher":9,"./stores/SChatUsersStore":12}],3:[function(require,module,exports){
/**
 * Created by tos on 08.11.2015.
 */
'use strict';

var keyMirror = require('../lib/MyUtils').keyMirror;

var MSG_TYPES = keyMirror({
    AUTH: null,
    HISTORY: null,
    MESSAGE: null,
    SYSTEM: null
});

function Msg(type, data) {
    if (!type || !data) new Error('�� ����� ���� �� ���������� ���������');
    this.type = type;
    this.data = data;
}
Msg.prototype.getType = function () {
    return this.type;
};
Msg.prototype.getData = function () {
    return this.data;
};

function MsgAuth(data) {
    this.type = MSG_TYPES.AUTH;
    this.data = data;
}
MsgAuth.prototype = Object.create(Msg.prototype);
MsgAuth.prototype.constructor = MsgAuth;

function MsgHistory(data) {
    this.type = MSG_TYPES.HISTORY;
    this.data = data;
}
MsgHistory.prototype = Object.create(Msg.prototype);
MsgHistory.prototype.constructor = MsgHistory;

function MsgMessage(data) {
    this.type = MSG_TYPES.MESSAGE;
    this.data = data;
}
MsgMessage.prototype = Object.create(Msg.prototype);
MsgMessage.prototype.constructor = MsgMessage;

module.exports = {
    createAuth: function createAuth(data) {
        return new MsgAuth(data);
    },
    createMessage: function createMessage(data) {
        return new MsgMessage(data);
    },
    getMsgTypes: function getMsgTypes() {
        return MSG_TYPES;
    }
};

},{"../lib/MyUtils":10}],4:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var ws = require('./websocket.js');
var dispatcher = require('../dispatcher/SChatDispatcher');

/*setTimeout(function(){
  ws.sendTestMsg('test message from chat');
},2000);*/

module.exports = [{
  name: 't0s',
  messages: 10
}, {
  name: 'test',
  messages: 5
}];

},{"../dispatcher/SChatDispatcher":9,"./websocket.js":6}],5:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */

var WS = require('./websocket'),
    Msg = require('./Message');

/* Обработчики интерфейса */
var button = document.getElementById('button');
button.onclick = function (e) {
    var input = document.getElementById('login').querySelector('input');
    if (input.value) WS.sendMsg(Msg.createAuth({ userName: input.value }));
};

var Interface = {
    showSection: function showSection(section) {
        var sections = document.getElementsByClassName('mainSection'),
            activateSection = document.getElementById(section);
        //console.log('Sections %o %o', section, sections.length);
        for (var i = 0; i < sections.length; i++) {
            sections[i].hidden = true;
        }
        activateSection.hidden = false;
    }
};

module.exports = Interface;

},{"./Message":3,"./websocket":6}],6:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */
var SChatActions = require('../actions/SChatActions'),
    MsgTypes = require('./Message').getMsgTypes();

var _socket = undefined,
    _events = {};
var WS_TYPE_NEW = 'new',
    WS_TYPE_MSG = "message";

function message(type, data) {
  switch (type) {
    case types.NEW:
      return { type: types.NEW, login: data.login };
      break;
    case types.MESSAGE:
      return { type: types.MESSAGE, login: data.login, msg: data.msg, time: data.time };
      break;
    default:
    //nothing
  }
}

var WS = {

  connect: function connect(url) {
    console.log('starting ws');
    if (_socket) return Error('Уже есть соединение');

    _socket = new WebSocket(url);

    _socket.onopen = function () {
      SChatActions.connectedToWebSocket();
      /*setTimeout(function () {
        _socket.send('New test user');
      }, 2000);*/
    };
    _socket.onclose = function (event) {
      console.log('Код: ' + event.code + ' причина: ' + event.reason);
    };
    _socket.onmessage = function (event) {
      console.log("f:websocket > получены данные %o", event.data);
      //SChatActions.authorized('Test');
      switch (event.data.type) {
        case MsgTypes.AUTH:
          SChatActions.authorized(event.data.userName);
          break;
        default:
        //todo don't know this type
      }
    };
    _socket.onerror = function (error) {
      console.log("Ошибка " + error.message);
    };

    return _socket;
  },

  getSocket: function getSocket() {
    return _socket;
  },

  sendMsg: function sendMsg(msg) {
    msg = JSON.stringify(msg);
    if (_socket) _socket.send(msg);else new Error('Socket does not exist yet');
    //console.log('Send message %o', JSON.stringify(msg));
  },

  sendTestMsg: function sendTestMsg(txt) {
    _socket.send(txt);
  }

};

module.exports = WS;

},{"../actions/SChatActions":1,"./Message":3}],7:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var ChatInterface = require('../chat/interface');

var SChatActions = require('../actions/SChatActions'),
    SChatUsersStore = require('../stores/SChatUsersStore'),
    SChatSectionsStore = require('../stores/SChatSectionsStore');

SChatUsersStore.addChangeListener(function () {
    console.log('Component retrieve data from store');
});

SChatSectionsStore.addChangeListener(function () {
    //console.log('f:SChatComponent > Activate section: ', SChatSectionsStore.getActiveSection());
    ChatInterface.showSection(SChatSectionsStore.getActiveSection());
});

module.exports = setTimeout(function () {
    SChatActions.updateListOfUsers(['user1', 'user2']);
}, 2000);

},{"../actions/SChatActions":1,"../chat/interface":5,"../stores/SChatSectionsStore":11,"../stores/SChatUsersStore":12}],8:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var keyMirror = require('../lib/MyUtils').keyMirror;

var SChatConstants = keyMirror({
    CONN_OPEN: null,
    AUTHORIZED: null,
    UPDATE_USERS_LIST: null
});

module.exports = SChatConstants;

},{"../lib/MyUtils":10}],9:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var _callbacks = [];

module.exports = {
    register: function register(callback) {
        _callbacks.push(callback);
    },
    dispatch: function dispatch(action) {
        _callbacks.map(function (v) {
            v(action);
        });
    }
};

},{}],10:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

module.exports = {
    keyMirror: function keyMirror(obj) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) obj[key] = key;
        }
        return obj;
    }
};

},{}],11:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change',
    SECTION_LOGIN = 'login',
    SECTION_CHAT = 'chat';

var _sections = {
    SECTION_LOGIN: false,
    SECTION_CHAT: false
};

function activateSection(section) {
    for (var key in _sections) {
        if (_sections.hasOwnProperty(key)) _sections[key] = false;
        _sections[section] = true;
    }
}

var SChatSectionsStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    },

    getActiveSection: function getActiveSection() {
        for (var key in _sections) {
            if (_sections.hasOwnProperty(key) && _sections[key]) return key;
        }
    }
});

SChatDispatcher.register(function (action) {
    //console.log('DISPATCHER registered in SChatSectionsStore');
    switch (action.actionType) {
        case SChatConstants.CONN_OPEN:
            activateSection(SECTION_LOGIN);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        case SChatConstants.AUTHORIZED:
            activateSection(SECTION_CHAT);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatSectionsStore;

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9,"./emiter":13}],12:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change';
var _users = [];

function updateUsers(newUsers) {
    _users = newUsers;
}

var SChatUsersStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    }
});

SChatDispatcher.register(function (action) {
    //console.log('DISPATCHER registered in SChatUsersStore');
    switch (action.actionType) {
        case SChatConstants.ACTIVATE_LOGIN_FORM:
            //SChatUsersStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatUsersStore;

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9,"./emiter":13}],13:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var Emitter = function Emitter() {};

Emitter.prototype.addMyListener = function (event, listener) {
    if (!this._events) this._events = {};
    if (!this._events.hasOwnProperty(event)) this._events[event] = [];
    this._events[event].push(listener);
};

Emitter.prototype.emit = function (event, arg) {
    if (this._events && this._events.hasOwnProperty(event)) {
        this._events[event].map(function (v) {
            v(arg);
        });
    }
};

module.exports = Emitter;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiU0NoYXRBY3Rpb25zLmpzIiwiYXBwLmpzIiwiTWVzc2FnZS5qcyIsImNoYXQuanMiLCJpbnRlcmZhY2UuanMiLCJ3ZWJzb2NrZXQuanMiLCJTQ2hhdENvbXBvbmVudC5qcyIsIlNDaGF0Q29uc3RhbnRzLmpzIiwiU0NoYXREaXNwYXRjaGVyLmpzIiwiTXlVdGlscy5qcyIsIlNDaGF0U2VjdGlvbnNTdG9yZS5qcyIsIlNDaGF0VXNlcnNTdG9yZS5qcyIsImVtaXRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQ0lBLElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztJQUMxRCxjQUFjLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7O0FBRTVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDYixxQkFBaUIsRUFBRSwyQkFBUyxPQUFPLEVBQUM7QUFDbEMsdUJBQWUsQ0FBQyxRQUFRLENBQUM7QUFDckIsc0JBQVUsRUFBRSxjQUFjLENBQUMsbUJBQW1CO0FBQzlDLGdCQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDLENBQUM7S0FDSjtBQUNELHdCQUFvQixFQUFFLGdDQUFVO0FBQzVCLGVBQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUNwRCx1QkFBZSxDQUFDLFFBQVEsQ0FBQztBQUNyQixzQkFBVSxFQUFFLGNBQWMsQ0FBQyxTQUFTO1NBQ3ZDLENBQUMsQ0FBQztLQUNOO0FBQ0QsY0FBVSxFQUFFLG9CQUFTLFFBQVEsRUFBRTtBQUMzQixlQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdELHVCQUFlLENBQUMsUUFBUSxDQUFDO0FBQ3JCLHNCQUFVLEVBQUUsY0FBYyxDQUFDLFVBQVU7QUFDckMs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O0FBRUYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBUyxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQzFDLFFBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNwRCxZQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFTLENBQUMsRUFBRTtBQUNoQyxhQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDVixDQUFDLENBQUE7S0FDTDtDQUNKLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IFNDaGF0RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyksXHJcbiAgICBTQ2hhdENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9TQ2hhdENvbnN0YW50cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICB1cGRhdGVMaXN0T2ZVc2VyczogZnVuY3Rpb24obmV3TGlzdCl7XHJcbiAgICAgIFNDaGF0RGlzcGF0Y2hlci5kaXNwYXRjaCh7XHJcbiAgICAgICAgICBhY3Rpb25UeXBlOiBTQ2hhdENvbnN0YW50cy5BQ1RJVkFURV9MT0dJTl9GT1JNLFxyXG4gICAgICAgICAgbGlzdDogbmV3TGlzdFxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBjb25uZWN0ZWRUb1dlYlNvY2tldDogZnVuY3Rpb24oKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnZjpTQ2hhdEFjdGlvbnMgPiBXZWJTb2NrZXQgY29ubmVjdGVkJyk7XHJcbiAgICAgICAgU0NoYXREaXNwYXRjaGVyLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgYWN0aW9uVHlwZTogU0NoYXRDb25zdGFudHMuQ09OTl9PUEVOXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYXV0aG9yaXplZDogZnVuY3Rpb24odXNlck5hbWUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZjpTQ2hhdEFjdGlvbnMgPiB1c2VyICVvIGF1dGhvcml6ZWQnLCB1c2VyTmFtZSk7XHJcbiAgICAgICAgU0NoYXREaXNwYXRjaGVyLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgYWN0aW9uVHlwZTogU0NoYXRDb25zdGFudHMuQVVUSE9SSVpFRCxcclxuICAgICAgICAgICAgdXNlck5hbWU6IHVzZXJOYW1lXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDYuMTEuMjAxNS5cclxuICovXHJcblxyXG5sZXQgY2hhdCA9IHJlcXVpcmUoJy4vY2hhdC9jaGF0Jyk7XHJcbmxldCB3cyA9IHJlcXVpcmUoJy4vY2hhdC93ZWJzb2NrZXQnKTtcclxubGV0IGRpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyk7XHJcbmxldCBjb21wb25lbnQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvU0NoYXRDb21wb25lbnQnKSxcclxuICAgIFNDaGF0VXNlcnNTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmVzL1NDaGF0VXNlcnNTdG9yZScpO1xyXG5cclxuY29uc29sZS5sb2coJ3N0YXJ0IGFwcCcpO1xyXG5cclxud3MuY29ubmVjdCgnd3M6Ly9sb2NhbGhvc3Q6ODA4MCcpO1xyXG5cclxuLypcclxuZnVuY3Rpb24gdGVzdEZuKC4uLnJlc3QpIHtcclxuICAgIGNvbnNvbGUubG9nKHJlc3QpO1xyXG59XHJcbnRlc3RGbignZGQnLCAndHQnLCAncHAnKTsqL1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDguMTEuMjAxNS5cclxuICovXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmxldCBrZXlNaXJyb3IgPSByZXF1aXJlKCcuLi9saWIvTXlVdGlscycpLmtleU1pcnJvclxyXG5cclxuY29uc3QgTVNHX1RZUEVTID0ga2V5TWlycm9yKHtcclxuICAgIEFVVEg6IG51bGwsXHJcbiAgICBISVNUT1JZOiBudWxsLFxyXG4gICAgTUVTU0FHRTogbnVsbCxcclxuICAgIFNZU1RFTTogbnVsbFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIE1zZyh0eXBlLGRhdGEpIHtcclxuICAgIGlmICghdHlwZSB8fCAhZGF0YSkgbmV3IEVycm9yKCfvv73vv70g77+977+977+977+977+9IO+/ve+/ve+/ve+/vSDvv73vv70g77+977+977+977+977+977+977+977+977+977+9IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vScpO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbn1cclxuTXNnLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlO1xyXG59O1xyXG5Nc2cucHJvdG90eXBlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gTXNnQXV0aCAoZGF0YSkge1xyXG4gICAgdGhpcy50eXBlID0gTVNHX1RZUEVTLkFVVEg7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG59XHJcbk1zZ0F1dGgucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNc2cucHJvdG90eXBlKTtcclxuTXNnQXV0aC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNc2dBdXRoO1xyXG5cclxuZnVuY3Rpb24gTXNnSGlzdG9yeSAoZGF0YSkge1xyXG4gICAgdGhpcy50eXBlID0gTVNHX1RZUEVTLkhJU1RPUlk7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG59XHJcbk1zZ0hpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNc2cucHJvdG90eXBlKTtcclxuTXNnSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNc2dIaXN0b3J5O1xyXG5cclxuZnVuY3Rpb24gTXNnTWVzc2FnZSAoZGF0YSkge1xyXG4gICAgdGhpcy50eXBlID0gTVNHX1RZUEVTLk1FU1NBR0U7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG59XHJcbk1zZ01lc3NhZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNc2cucHJvdG90eXBlKTtcclxuTXNnTWVzc2FnZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNc2dNZXNzYWdlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBjcmVhdGVBdXRoOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNc2dBdXRoKGRhdGEpO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZU1lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE1zZ01lc3NhZ2UoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0TXNnVHlwZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBNU0dfVFlQRVM7XHJcbiAgICB9XHJcbn07IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA2LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IHdzID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQuanMnKTtcclxubGV0IGRpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL1NDaGF0RGlzcGF0Y2hlcicpO1xyXG5cclxuLypzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgd3Muc2VuZFRlc3RNc2coJ3Rlc3QgbWVzc2FnZSBmcm9tIGNoYXQnKTtcclxufSwyMDAwKTsqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogJ3QwcycsXHJcbiAgICBtZXNzYWdlczogMTBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICd0ZXN0JyxcclxuICAgIG1lc3NhZ2VzOiA1XHJcbiAgfVxyXG5dOyIsIi8qKlxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDcuMTEuMjAxNS5cbiAqL1xuXG5cbmxldCBXUyA9IHJlcXVpcmUoJy4vd2Vic29ja2V0JyksXG4gICAgTXNnID0gcmVxdWlyZSgnLi9NZXNzYWdlJyk7XG5cbi8qINCe0LHRgNCw0LHQvtGC0YfQuNC60Lgg0LjQvdGC0LXRgNGE0LXQudGB0LAgKi9cbmxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnV0dG9uJyk7XG5idXR0b24ub25jbGljayA9IGZ1bmN0aW9uKGUpe1xuICAgIGxldCBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dpbicpLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgaWYgKGlucHV0LnZhbHVlKSBXUy5zZW5kTXNnKE1zZy5jcmVhdGVBdXRoKHt1c2VyTmFtZTppbnB1dC52YWx1ZX0pKTtcbn07XG5cblxubGV0IEludGVyZmFjZSA9IHtcbiAgICBzaG93U2VjdGlvbjogZnVuY3Rpb24oc2VjdGlvbikge1xuICAgICAgICBsZXQgc2VjdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtYWluU2VjdGlvbicpLFxuICAgICAgICAgICAgYWN0aXZhdGVTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VjdGlvbik7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1NlY3Rpb25zICVvICVvJywgc2VjdGlvbiwgc2VjdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZWN0aW9uc1tpXS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2YXRlU2VjdGlvbi5oaWRkZW4gPSBmYWxzZTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyZmFjZTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDcuMTEuMjAxNS5cclxuICovXHJcbmxldCBTQ2hhdEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL1NDaGF0QWN0aW9ucycpLFxyXG4gICAgTXNnVHlwZXMgPSByZXF1aXJlKCcuL01lc3NhZ2UnKS5nZXRNc2dUeXBlcygpO1xyXG5cclxubGV0IF9zb2NrZXQsXHJcbiAgICBfZXZlbnRzID0ge307XHJcbmNvbnN0IFdTX1RZUEVfTkVXID0gJ25ldycsXHJcbiAgICAgIFdTX1RZUEVfTVNHID0gXCJtZXNzYWdlXCI7XHJcblxyXG5mdW5jdGlvbiBtZXNzYWdlKHR5cGUsZGF0YSkge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSB0eXBlcy5ORVc6XHJcbiAgICAgIHJldHVybiB7dHlwZTogdHlwZXMuTkVXLCBsb2dpbjogZGF0YS5sb2dpbn07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSB0eXBlcy5NRVNTQUdFOlxyXG4gICAgICByZXR1cm4ge3R5cGU6IHR5cGVzLk1FU1NBR0UsIGxvZ2luOmRhdGEubG9naW4sIG1zZzogZGF0YS5tc2csIHRpbWU6IGRhdGEudGltZX07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdCA6XHJcbiAgICAgIC8vbm90aGluZ1xyXG4gIH1cclxufVxyXG5cclxubGV0IFdTID0ge1xyXG5cclxuICBjb25uZWN0OiBmdW5jdGlvbih1cmwpIHtcclxuICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB3cycpO1xyXG4gICAgaWYgKF9zb2NrZXQpIHJldHVybiBFcnJvcign0KPQttC1INC10YHRgtGMINGB0L7QtdC00LjQvdC10L3QuNC1Jyk7XHJcblxyXG4gICAgX3NvY2tldCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcclxuXHJcbiAgICBfc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBTQ2hhdEFjdGlvbnMuY29ubmVjdGVkVG9XZWJTb2NrZXQoKTtcclxuICAgICAgLypzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfc29ja2V0LnNlbmQoJ05ldyB0ZXN0IHVzZXInKTtcclxuICAgICAgfSwgMjAwMCk7Ki9cclxuICAgIH07XHJcbiAgICBfc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkgeyBjb25zb2xlLmxvZygn0JrQvtC0OiAnICsgZXZlbnQuY29kZSArICcg0L/RgNC40YfQuNC90LA6ICcgKyBldmVudC5yZWFzb24pOyB9O1xyXG4gICAgX3NvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcImY6d2Vic29ja2V0ID4g0L/QvtC70YPRh9C10L3RiyDQtNCw0L3QvdGL0LUgJW9cIiwgZXZlbnQuZGF0YSk7XHJcbiAgICAgIC8vU0NoYXRBY3Rpb25zLmF1dGhvcml6ZWQoJ1Rlc3QnKTtcclxuICAgICAgc3dpdGNoIChldmVudC5kYXRhLnR5cGUpIHtcclxuICAgICAgICBjYXNlIE1zZ1R5cGVzLkFVVEg6XHJcbiAgICAgICAgICBTQ2hhdEFjdGlvbnMuYXV0aG9yaXplZChldmVudC5kYXRhLnVzZXJOYW1lKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgLy90b2RvIGRvbid0IGtub3cgdGhpcyB0eXBlXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBfc29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbihlcnJvcikgeyBjb25zb2xlLmxvZyhcItCe0YjQuNCx0LrQsCBcIiArIGVycm9yLm1lc3NhZ2UpOyB9O1xyXG5cclxuICAgIHJldHVybiBfc29ja2V0O1xyXG4gIH0sXHJcblxyXG4gIGdldFNvY2tldDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gX3NvY2tldDtcclxuICB9LFxyXG5cclxuICBzZW5kTXNnOiBmdW5jdGlvbihtc2cpIHtcclxuICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5KG1zZyk7XHJcbiAgICBpZiAoX3NvY2tldCkgX3NvY2tldC5zZW5kKG1zZyk7XHJcbiAgICBlbHNlIG5ldyBFcnJvcignU29ja2V0IGRvZXMgbm90IGV4aXN0IHlldCcpO1xyXG4gICAgLy9jb25zb2xlLmxvZygnU2VuZCBtZXNzYWdlICVvJywgSlNPTi5zdHJpbmdpZnkobXNnKSk7XHJcbiAgfSxcclxuXHJcbiAgc2VuZFRlc3RNc2c6IGZ1bmN0aW9uKHR4dCkge1xyXG4gICAgX3NvY2tldC5zZW5kKHR4dCk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV1M7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IENoYXRJbnRlcmZhY2UgPSByZXF1aXJlKCcuLi9jaGF0L2ludGVyZmFjZScpO1xyXG5cclxubGV0IFNDaGF0QWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvU0NoYXRBY3Rpb25zJyksXHJcbiAgICBTQ2hhdFVzZXJzU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvU0NoYXRVc2Vyc1N0b3JlJyksXHJcbiAgICBTQ2hhdFNlY3Rpb25zU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvU0NoYXRTZWN0aW9uc1N0b3JlJyk7XHJcblxyXG5TQ2hhdFVzZXJzU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0NvbXBvbmVudCByZXRyaWV2ZSBkYXRhIGZyb20gc3RvcmUnKTtcclxufSk7XHJcblxyXG5TQ2hhdFNlY3Rpb25zU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgLy9jb25zb2xlLmxvZygnZjpTQ2hhdENvbXBvbmVudCA+IEFjdGl2YXRlIHNlY3Rpb246ICcsIFNDaGF0U2VjdGlvbnNTdG9yZS5nZXRBY3RpdmVTZWN0aW9uKCkpO1xyXG4gICAgQ2hhdEludGVyZmFjZS5zaG93U2VjdGlvbihTQ2hhdFNlY3Rpb25zU3RvcmUuZ2V0QWN0aXZlU2VjdGlvbigpKTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgIFNDaGF0QWN0aW9ucy51cGRhdGVMaXN0T2ZVc2VycyhbJ3VzZXIxJywndXNlcjInXSk7XHJcbn0sMjAwMCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IGtleU1pcnJvciA9IHJlcXVpcmUoJy4uL2xpYi9NeVV0aWxzJykua2V5TWlycm9yO1xyXG5cclxubGV0IFNDaGF0Q29uc3RhbnRzID0ga2V5TWlycm9yKHtcclxuICAgIENPTk5fT1BFTjogbnVsbCxcclxuICAgIEFVVEhPUklaRUQ6IG51bGwsXHJcbiAgICBVUERBVEVfVVNFUlNfTElTVDogbnVsbFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU0NoYXRDb25zdGFudHM7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgdG9zIG9uIDA4LjExLjIwMTUuXHJcbiAqL1xyXG5cclxubGV0IF9jYWxsYmFja3MgPSBbXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcclxuICAgICAgICBfY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfSxcclxuICAgIGRpc3BhdGNoOiBmdW5jdGlvbihhY3Rpb24pe1xyXG4gICAgICAgIF9jYWxsYmFja3MubWFwKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHYoYWN0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDguMTEuMjAxNS5cclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGtleU1pcnJvcjogZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBvYmpba2V5XSA9IGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxufTsiLCIvKipcclxuICogQ3JlYXRlZCBieSB0b3Mgb24gMDguMTEuMjAxNS5cclxuICovXHJcblxyXG5cclxubGV0IFNDaGF0RGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3BhdGNoZXIvU0NoYXREaXNwYXRjaGVyJyksXHJcbiAgICBTQ2hhdENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9TQ2hhdENvbnN0YW50cycpLFxyXG4gICAgRW1pdHRlciA9IHJlcXVpcmUoJy4vZW1pdGVyJyk7XHJcblxyXG5jb25zdCAgIENIQU5HRV9FVkVOVCA9ICdjaGFuZ2UnLFxyXG4gICAgICAgIFNFQ1RJT05fTE9HSU4gPSAnbG9naW4nLFxyXG4gICAgICAgIFNFQ1RJT05fQ0hBVCA9ICdjaGF0JztcclxuXHJcbmxldCBfc2VjdGlvbnMgPSB7XHJcbiAgICBTRUNUSU9OX0xPR0lOOiBmYWxzZSxcclxuICAgIFNFQ1RJT05fQ0hBVDogZmFsc2VcclxufTtcclxuXHJcbmZ1bmN0aW9uIGFjdGl2YXRlU2VjdGlvbihzZWN0aW9uKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gX3NlY3Rpb25zKSB7XHJcbiAgICAgICAgaWYgKF9zZWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBfc2VjdGlvbnNba2V5XSA9IGZhbHNlO1xyXG4gICAgICAgIF9zZWN0aW9uc1tzZWN0aW9uXSA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBTQ2hhdFNlY3Rpb25zU3RvcmUgPSBPYmplY3QuYXNzaWduKHt9LCBFbWl0dGVyLnByb3RvdHlwZSwge1xyXG4gICAgYWRkQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5hZGRNeUxpc3RlbmVyKENIQU5HRV9FVkVOVCwgY2FsbGJhY2spO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRBY3RpdmVTZWN0aW9uOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBfc2VjdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKF9zZWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIF9zZWN0aW9uc1trZXldKSByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5TQ2hhdERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24oYWN0aW9uKXtcclxuICAgIC8vY29uc29sZS5sb2coJ0RJU1BBVENIRVIgcmVnaXN0ZXJlZCBpbiBTQ2hhdFNlY3Rpb25zU3RvcmUnKTtcclxuICAgIHN3aXRjaCAoYWN0aW9uLmFjdGlvblR5cGUpIHtcclxuICAgICAgICBjYXNlIFNDaGF0Q29uc3RhbnRzLkNPTk5fT1BFTjpcclxuICAgICAgICAgICAgYWN0aXZhdGVTZWN0aW9uKFNFQ1RJT05fTE9HSU4pO1xyXG4gICAgICAgICAgICBTQ2hhdFNlY3Rpb25zU3RvcmUuZW1pdChDSEFOR0VfRVZFTlQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFNDaGF0Q29uc3RhbnRzLkFVVEhPUklaRUQ6XHJcbiAgICAgICAgICAgIGFjdGl2YXRlU2VjdGlvbihTRUNUSU9OX0NIQVQpO1xyXG4gICAgICAgICAgICBTQ2hhdFNlY3Rpb25zU3RvcmUuZW1pdChDSEFOR0VfRVZFTlQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgIC8vbm90aGluZ1xyXG4gICAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU0NoYXRTZWN0aW9uc1N0b3JlOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHRvcyBvbiAwOC4xMS4yMDE1LlxyXG4gKi9cclxuXHJcbmxldCBTQ2hhdERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL1NDaGF0RGlzcGF0Y2hlcicpLFxyXG4gICAgU0NoYXRDb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMvU0NoYXRDb25zdGFudHMnKSxcclxuICAgIEVtaXR0ZXIgPSByZXF1aXJlKCcuL2VtaXRlcicpO1xyXG5cclxuY29uc3QgQ0hBTkdFX0VWRU5UID0gJ2NoYW5nZSc7XHJcbmxldCBfdXNlcnMgPSBbXTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVVzZXJzKG5ld1VzZXJzKSB7XHJcbiAgICBfdXNlcnMgPSBuZXdVc2VycztcclxufVxyXG5cclxubGV0IFNDaGF0VXNlcnNTdG9yZSA9IE9iamVjdC5hc3NpZ24oe30sIEVtaXR0ZXIucHJvdG90eXBlLCB7XHJcbiAgICBhZGRDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmFkZE15TGlzdGVuZXIoQ0hBTkdFX0VWRU5ULCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuU0NoYXREaXNwYXRjaGVyLnJlZ2lzdGVyKGZ1bmN0aW9uKGFjdGlvbil7XHJcbiAgICAvL2NvbnNvbGUubG9nKCdESVNQQVRDSEVSIHJlZ2lzdGVyZWQgaW4gU0NoYXRVc2Vyc1N0b3JlJyk7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgY2FzZSBTQ2hhdENvbnN0YW50cy5BQ1RJVkFURV9MT0dJTl9GT1JNOlxyXG4gICAgICAgICAgICAvL1NDaGF0VXNlcnNTdG9yZS5lbWl0KENIQU5HRV9FVkVOVCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIC8vbm90aGluZ1xyXG4gICAgfVxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU0NoYXRVc2Vyc1N0b3JlOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IHRvcyBvbiAwOC4xMS4yMDE1LlxyXG4gKi9cclxuXHJcbmxldCBFbWl0dGVyID0gZnVuY3Rpb24oKSB7XHJcbn07XHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRNeUxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsbGlzdGVuZXIpIHtcclxuICAgIGlmICghdGhpcy5fZXZlbnRzKSB0aGlzLl9ldmVudHMgPSB7fTtcclxuICAgIGlmICghdGhpcy5fZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50KSkgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IFtdO1xyXG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcclxufTtcclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCwgYXJnKSB7XHJcbiAgICBpZiAodGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcclxuICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdLm1hcChmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgICAgIHYoYXJnKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyOyJdfQ==
