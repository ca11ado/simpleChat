(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants');

module.exports = {
    updateListOfUsers: function updateListOfUsers(newList) {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.ACTIVATE_LOGIN_FORM,
            list: newList
        });
    },
    connectedToWebSocket: function connectedToWebSocket() {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.CONN_OPEN
        });
    },
    authorized: function authorized(userName) {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.AUTHORIZED,
            userName: userName
        });
    }
};

},{"../constants/SChatConstants":7,"../dispatcher/SChatDispatcher":8}],2:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var chat = require('./chat/chat');
var ws = require('./chat/websocket');
var dispatcher = require('./dispatcher/SChatDispatcher');
var component = require('./components/SChatComponent'),
    SChatUsersStore = require('./stores/SChatUsersStore');

console.log('start app');

ws.connect('ws://localhost:8080');

ws.onMsg('myMsg', function (data) {
  console.log('New myMsg message', data);
});

setTimeout(function () {
  ws.sendTestMsg('test message from app');
}, 2000);

},{"./chat/chat":3,"./chat/websocket":5,"./components/SChatComponent":6,"./dispatcher/SChatDispatcher":8,"./stores/SChatUsersStore":10}],3:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var ws = require('./websocket.js');
var dispatcher = require('../dispatcher/SChatDispatcher');

setTimeout(function () {
  ws.sendTestMsg('test message from chat');
}, 2000);

module.exports = [{
  name: 't0s',
  messages: 10
}, {
  name: 'test',
  messages: 5
}];

},{"../dispatcher/SChatDispatcher":8,"./websocket.js":5}],4:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */

/*let button = document.getElementById('button');
button.onclick = function(e){
    console.log('button', e);
};*/

var Interface = {
    showSection: function showSection(section) {
        var sections = document.getElementsByClassName('mainSection'),
            activateSection = document.getElementById(section);
        console.log('Sections %o %o', section, sections.length);
        for (var i = 0; i < sections.length; i++) {
            sections[i].hidden = true;
        }
        /*sections.map(function (v) {
            v.hidden = true;
        });*/
        activateSection.hidden = false;
    }
};

module.exports = Interface;

},{}],5:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */
var SChatActions = require('../actions/SChatActions');

var _socket = undefined,
    _events = {};
var WS_TYPE_NEW = 'new',
    WS_TYPE_MSG = "message";

function message(type, data) {
  switch (type) {
    case types.NEW:
      return { type: types.NEW, login: data.login };
      break;
    case types.MESSAGE:
      return { type: types.MESSAGE, login: data.login, msg: data.msg, time: data.time };
      break;
    default:
    //nothing
  }
}

var WS = {

  connect: function connect(url) {
    console.log('starting ws');
    if (_socket) return Error('Уже есть соединение');

    _socket = new WebSocket(url);

    _socket.onopen = function () {
      SChatActions.connectedToWebSocket();
      setTimeout(function () {
        _socket.send('New test user');
      }, 2000);
    };
    _socket.onclose = function (event) {
      console.log('Код: ' + event.code + ' причина: ' + event.reason);
    };
    _socket.onmessage = function (event) {
      console.log("f:websocket > получены данные " + event.data);
      SChatActions.authorized('Test');
    };
    _socket.onerror = function (error) {
      console.log("Ошибка " + error.message);
    };

    return _socket;
  },

  getSocket: function getSocket() {
    return _socket;
  },

  onMsg: function onMsg(event, callback) {
    _events[event] = _events[event] ? _events[event].push(callback) : [];
  },

  emitMsg: function emitMsg(event, arg) {
    if (_events.hasOwnProperty(event)) {
      _events[event].map(function (v) {
        v(arg);
      });
    }
  },

  sendTestMsg: function sendTestMsg(txt) {
    _socket.send(txt);
  }

};

module.exports = WS;

},{"../actions/SChatActions":1}],6:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var ChatInterface = require('../chat/interface');

var SChatActions = require('../actions/SChatActions'),
    SChatUsersStore = require('../stores/SChatUsersStore'),
    SChatSectionsStore = require('../stores/SChatSectionsStore');

SChatUsersStore.addChangeListener(function () {
    console.log('Component retrieve data from store');
});

SChatSectionsStore.addChangeListener(function () {
    console.log('f:SChatComponent > Activate section: ', SChatSectionsStore.getActiveSection());
    ChatInterface.showSection(SChatSectionsStore.getActiveSection());
});

module.exports = setTimeout(function () {
    SChatActions.updateListOfUsers(['user1', 'user2']);
}, 2000);

},{"../actions/SChatActions":1,"../chat/interface":4,"../stores/SChatSectionsStore":9,"../stores/SChatUsersStore":10}],7:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

function keyMirror(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) obj[key] = key;
    }
    return obj;
}

var SChatConstants = keyMirror({
    CONN_OPEN: null,
    AUTHORIZED: null,
    UPDATE_USERS_LIST: null
});

module.exports = SChatConstants;

},{}],8:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var _callbacks = [];

module.exports = {
    register: function register(callback) {
        _callbacks.push(callback);
    },
    dispatch: function dispatch(action) {
        _callbacks.map(function (v) {
            v(action);
        });
    }
};

},{}],9:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change',
    SECTION_LOGIN = 'login',
    SECTION_CHAT = 'chat';

var _sections = {
    SECTION_LOGIN: false,
    SECTION_CHAT: false
};

function activateSection(section) {
    for (var key in _sections) {
        if (_sections.hasOwnProperty(key)) _sections[key] = false;
        _sections[section] = true;
    }
}

var SChatSectionsStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    },

    getActiveSection: function getActiveSection() {
        for (var key in _sections) {
            if (_sections.hasOwnProperty(key) && _sections[key]) return key;
        }
    }
});

SChatDispatcher.register(function (action) {
    console.log('DISPATCHER registered in SChatSectionsStore');
    switch (action.actionType) {
        case SChatConstants.CONN_OPEN:
            activateSection(SECTION_LOGIN);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        case SChatConstants.AUTHORIZED:
            activateSection(SECTION_CHAT);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatSectionsStore;

},{"../constants/SChatConstants":7,"../dispatcher/SChatDispatcher":8,"./emiter":11}],10:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change';
var _users = [];

function updateUsers(newUsers) {
    _users = newUsers;
}

var SChatUsersStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    }
});

SChatDispatcher.register(function (action) {
    console.log('DISPATCHER registered in SChatUsersStore');
    switch (action.actionType) {
        case SChatConstants.ACTIVATE_LOGIN_FORM:
            //SChatUsersStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatUsersStore;

},{"../constants/SChatConstants":7,"../dispatcher/SChatDispatcher":8,"./emiter":11}],11:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var Emitter = function Emitter() {};

Emitter.prototype.addMyListener = function (event, listener) {
    if (!this._events) this._events = {};
    if (!this._events.hasOwnProperty(event)) this._events[event] = [];
    this._events[event].push(listener);
};

Emitter.prototype.emit = function (event, arg) {
    if (this._events && this._events.hasOwnProperty(event)) {
        this._events[event].map(function (v) {
            v(arg);
        });
    }
};

module.exports = Emitter;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
