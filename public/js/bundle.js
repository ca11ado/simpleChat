(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants');

module.exports = {
    updateListOfUsers: function updateListOfUsers(newList) {
        SChatDispatcher.dispatch({
            actionType: SChatConstants.ACTIVATE_LOGIN_FORM,
            list: newList
        });
    },
    connectedToWebSocket: function connectedToWebSocket() {
        console.log('f:SChatActions > WebSocket connected');
        SChatDispatcher.dispatch({
            actionType: SChatConstants.CONN_OPEN
        });
    },
    authorized: function authorized(userName) {
        console.log('f:SChatActions > user %o authorized', userName);
        SChatDispatcher.dispatch({
            actionType: SChatConstants.AUTHORIZED,
            userName: userName
        });
    }
};

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9}],2:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var chat = require('./chat/chat');
var ws = require('./chat/websocket');
var dispatcher = require('./dispatcher/SChatDispatcher');
var component = require('./components/SChatComponent'),
    SChatUsersStore = require('./stores/SChatUsersStore');

console.log('start app');

ws.connect('ws://localhost:8080');

/*
function testFn(...rest) {
    console.log(rest);
}
testFn('dd', 'tt', 'pp');*/

},{"./chat/chat":4,"./chat/websocket":6,"./components/SChatComponent":7,"./dispatcher/SChatDispatcher":9,"./stores/SChatUsersStore":12}],3:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var keyMirror = require('../lib/MyUtils').keyMirror;

var MSG_TYPES = keyMirror({
    AUTH: null,
    HISTORY: null,
    MESSAGE: null,
    SYSTEM: null
});

function Msg(type, data) {
    if (!type || !data) new Error('�� ����� ���� �� ���������� ���������');
    this.type = type;
    this.data = data;
}
Msg.prototype.getType = function () {
    return this.type;
};
Msg.prototype.getData = function () {
    return this.data;
};

function MsgAuth(data) {
    this.type = MSG_TYPES.AUTH;
    this.data = data;
}
MsgAuth.prototype = Object.create(Msg.prototype);
MsgAuth.prototype.constructor = MsgAuth;

function MsgHistory(data) {
    this.type = MSG_TYPES.HISTORY;
    this.data = data;
}
MsgHistory.prototype = Object.create(Msg.prototype);
MsgHistory.prototype.constructor = MsgHistory;

function MsgMessage(data) {
    this.type = MSG_TYPES.MESSAGE;
    this.data = data;
}
MsgMessage.prototype = Object.create(Msg.prototype);
MsgMessage.prototype.constructor = MsgMessage;

module.exports = {
    createAuth: function createAuth(data) {
        return new MsgAuth(data);
    },
    createMessage: function createMessage(data) {
        return new MsgMessage(data);
    },
    getMsgTypes: function getMsgTypes() {
        return MSG_TYPES;
    }
};

},{"../lib/MyUtils":10}],4:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 06.11.2015.
 */

var ws = require('./websocket.js');
var dispatcher = require('../dispatcher/SChatDispatcher');

/*setTimeout(function(){
  ws.sendTestMsg('test message from chat');
},2000);*/

module.exports = [{
  name: 't0s',
  messages: 10
}, {
  name: 'test',
  messages: 5
}];

},{"../dispatcher/SChatDispatcher":9,"./websocket.js":6}],5:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */

var WS = require('./websocket'),
    Msg = require('./Message');

/* Обработчики интерфейса */
var button = document.getElementById('button');
button.onclick = function (e) {
    var input = document.getElementById('login').querySelector('input');
    if (input.value) WS.sendMsg(Msg.createAuth({ userName: input.value }));
};

var Interface = {
    showSection: function showSection(section) {
        var sections = document.getElementsByClassName('mainSection'),
            activateSection = document.getElementById(section);
        //console.log('Sections %o %o', section, sections.length);
        for (var i = 0; i < sections.length; i++) {
            sections[i].hidden = true;
        }
        activateSection.hidden = false;
    }
};

module.exports = Interface;

},{"./Message":3,"./websocket":6}],6:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 07.11.2015.
 */
var SChatActions = require('../actions/SChatActions'),
    MsgTypes = require('./Message').getMsgTypes();

var _socket = undefined,
    _events = {};
var WS_TYPE_NEW = 'new',
    WS_TYPE_MSG = "message";

function message(type, data) {
  switch (type) {
    case types.NEW:
      return { type: types.NEW, login: data.login };
      break;
    case types.MESSAGE:
      return { type: types.MESSAGE, login: data.login, msg: data.msg, time: data.time };
      break;
    default:
    //nothing
  }
}

var WS = {

  connect: function connect(url) {
    console.log('starting ws');
    if (_socket) return Error('Уже есть соединение');

    _socket = new WebSocket(url);

    _socket.onopen = function () {
      SChatActions.connectedToWebSocket();
      /*setTimeout(function () {
        _socket.send('New test user');
      }, 2000);*/
    };
    _socket.onclose = function (event) {
      console.log('Код: ' + event.code + ' причина: ' + event.reason);
    };
    _socket.onmessage = function (event) {
      console.log("f:websocket > получены данные %o", event.data);
      //SChatActions.authorized('Test');
      switch (event.data.type) {
        case MsgTypes.AUTH:
          SChatActions.authorized(event.data.userName);
          break;
        default:
        //todo don't know this type
      }
    };
    _socket.onerror = function (error) {
      console.log("Ошибка " + error.message);
    };

    return _socket;
  },

  getSocket: function getSocket() {
    return _socket;
  },

  sendMsg: function sendMsg(msg) {
    if (_socket) _socket.send(msg);else new Error('Socket does not exist yet');
    console.log('Send message %o', JSON.stringify(msg));
  },

  sendTestMsg: function sendTestMsg(txt) {
    _socket.send(txt);
  }

};

module.exports = WS;

},{"../actions/SChatActions":1,"./Message":3}],7:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var ChatInterface = require('../chat/interface');

var SChatActions = require('../actions/SChatActions'),
    SChatUsersStore = require('../stores/SChatUsersStore'),
    SChatSectionsStore = require('../stores/SChatSectionsStore');

SChatUsersStore.addChangeListener(function () {
    console.log('Component retrieve data from store');
});

SChatSectionsStore.addChangeListener(function () {
    //console.log('f:SChatComponent > Activate section: ', SChatSectionsStore.getActiveSection());
    ChatInterface.showSection(SChatSectionsStore.getActiveSection());
});

module.exports = setTimeout(function () {
    SChatActions.updateListOfUsers(['user1', 'user2']);
}, 2000);

},{"../actions/SChatActions":1,"../chat/interface":5,"../stores/SChatSectionsStore":11,"../stores/SChatUsersStore":12}],8:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var keyMirror = require('../lib/MyUtils').keyMirror;

var SChatConstants = keyMirror({
    CONN_OPEN: null,
    AUTHORIZED: null,
    UPDATE_USERS_LIST: null
});

module.exports = SChatConstants;

},{"../lib/MyUtils":10}],9:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var _callbacks = [];

module.exports = {
    register: function register(callback) {
        _callbacks.push(callback);
    },
    dispatch: function dispatch(action) {
        _callbacks.map(function (v) {
            v(action);
        });
    }
};

},{}],10:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

module.exports = {
    keyMirror: function keyMirror(obj) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) obj[key] = key;
        }
        return obj;
    }
};

},{}],11:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change',
    SECTION_LOGIN = 'login',
    SECTION_CHAT = 'chat';

var _sections = {
    SECTION_LOGIN: false,
    SECTION_CHAT: false
};

function activateSection(section) {
    for (var key in _sections) {
        if (_sections.hasOwnProperty(key)) _sections[key] = false;
        _sections[section] = true;
    }
}

var SChatSectionsStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    },

    getActiveSection: function getActiveSection() {
        for (var key in _sections) {
            if (_sections.hasOwnProperty(key) && _sections[key]) return key;
        }
    }
});

SChatDispatcher.register(function (action) {
    //console.log('DISPATCHER registered in SChatSectionsStore');
    switch (action.actionType) {
        case SChatConstants.CONN_OPEN:
            activateSection(SECTION_LOGIN);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        case SChatConstants.AUTHORIZED:
            activateSection(SECTION_CHAT);
            SChatSectionsStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatSectionsStore;

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9,"./emiter":13}],12:[function(require,module,exports){
'use strict';

/**
 * Created by tos on 08.11.2015.
 */

var SChatDispatcher = require('../dispatcher/SChatDispatcher'),
    SChatConstants = require('../constants/SChatConstants'),
    Emitter = require('./emiter');

var CHANGE_EVENT = 'change';
var _users = [];

function updateUsers(newUsers) {
    _users = newUsers;
}

var SChatUsersStore = Object.assign({}, Emitter.prototype, {
    addChangeListener: function addChangeListener(callback) {
        this.addMyListener(CHANGE_EVENT, callback);
    }
});

SChatDispatcher.register(function (action) {
    //console.log('DISPATCHER registered in SChatUsersStore');
    switch (action.actionType) {
        case SChatConstants.ACTIVATE_LOGIN_FORM:
            //SChatUsersStore.emit(CHANGE_EVENT);
            break;
        default:
        //nothing
    }
});

module.exports = SChatUsersStore;

},{"../constants/SChatConstants":8,"../dispatcher/SChatDispatcher":9,"./emiter":13}],13:[function(require,module,exports){
"use strict";

/**
 * Created by tos on 08.11.2015.
 */

var Emitter = function Emitter() {};

Emitter.prototype.addMyListener = function (event, listener) {
    if (!this._events) this._events = {};
    if (!this._events.hasOwnProperty(event)) this._events[event] = [];
    this._events[event].push(listener);
};

Emitter.prototype.emit = function (event, arg) {
    if (this._events && this._events.hasOwnProperty(event)) {
        this._events[event].map(function (v) {
            v(arg);
        });
    }
};

module.exports = Emitter;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
